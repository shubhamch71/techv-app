name: 2. Create VPC + EKS

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type: CREATE INFRA'
        required: true
        default: ''

jobs:
  create-infra:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.event.inputs.confirm == 'CREATE INFRA'

    steps:
      # -------------------------------------------------
      # 0. Checkout & AWS auth
      # -------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      # -------------------------------------------------
      # 1. Terraform – VPC + EKS
      # -------------------------------------------------
      - name: Deploy VPC + EKS
        run: |
          cd infra/terraform/app

          echo "Initializing Terraform with S3 backend..."
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=eks/app.tfstate" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_TABLE }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

          echo "Applying configuration..."
          set +e
          terraform apply -auto-approve \
            -var="cluster_name=${{ secrets.EKS_CLUSTER_NAME }}" \
            > apply.log 2>&1
          TF_EXIT=$?
          set -e

          # Ignore "already exists" errors (idempotent)
          if grep -q "EntityAlreadyExists\|AlreadyExistsException" apply.log; then
            TF_EXIT=0
          fi

          if [ $TF_EXIT -ne 0 ]; then
            echo "Terraform apply failed:"
            cat apply.log
            exit $TF_EXIT
          fi

          echo "Terraform apply complete – resources submitted to AWS."

      # -------------------------------------------------
      # 2. Wait for EKS cluster to become ACTIVE
      # -------------------------------------------------
      - name: Wait for EKS Cluster to be ACTIVE
        run: |
          echo "Waiting for cluster '${{ secrets.EKS_CLUSTER_NAME }}' to become ACTIVE..."
          timeout=1200   # 20 minutes max
          interval=30
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            STATUS=$(aws eks describe-cluster \
              --name ${{ secrets.EKS_CLUSTER_NAME }} \
              --region ${{ secrets.AWS_REGION }} \
              --query 'cluster.status' --output text 2>/dev/null || echo "NOT_FOUND")

            echo "Cluster status: $STATUS (elapsed: ${elapsed}s)"

            if [[ "$STATUS" == "ACTIVE" ]]; then
              echo "EKS CLUSTER IS ACTIVE!"
              break
            fi

            if [[ "$STATUS" == "FAILED" ]]; then
              echo "EKS CLUSTER CREATION FAILED"
              aws eks describe-cluster --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
              exit 1
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [[ "$STATUS" != "ACTIVE" ]]; then
            echo "TIMEOUT: Cluster did not become ACTIVE in 20 minutes"
            exit 1
          fi

      # -------------------------------------------------
      # 3. Re-authenticate (IAM changes after TF)
      # -------------------------------------------------
      - name: Reconfigure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo "kubectl installed"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --alias techv
          echo "Connected to EKS"
          kubectl get nodes

      # -------------------------------------------------
      # 4. Install Pod-Identity Agent (idempotent)
      # -------------------------------------------------
      - name: Install Pod Identity Agent
        run: |
          echo "Installing eks-pod-identity-agent..."
          aws eks create-addon \
            --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
            --addon-name eks-pod-identity-agent \
            --resolve-conflicts=OVERWRITE \
            || echo "Pod-Identity agent already installed"
          echo "Waiting 4 minutes for Pod-Identity agent..."
          sleep 240

      # -------------------------------------------------
      # 5. Create EBS-CSI IAM Role – **FULL IDEMPOTENT LOGIC**
      # -------------------------------------------------
      - name: Create EBS CSI IAM Role
        run: |
          echo "Setting up IAM role for EBS CSI driver..."

          # Get OIDC issuer ID
          OIDC_ID=$(aws eks describe-cluster \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --query "cluster.identity.oidc.issuer" \
            --output text | cut -d '/' -f 5)

          OIDC_URL="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/oidc.eks.${{ secrets.AWS_REGION }}.amazonaws.com/id/$OIDC_ID"

          cat > ebs-trust-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Federated": "$OIDC_URL" },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "oidc.eks.${{ secrets.AWS_REGION }}.amazonaws.com/id/$OIDC_ID:aud": "sts.amazonaws.com",
                    "oidc.eks.${{ secrets.AWS_REGION }}.amazonaws.com/id/$OIDC_ID:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                  }
                }
              }
            ]
          }
          EOF

          ROLE_NAME="AmazonEKS_EBS_CSI_DriverRole_${{ secrets.EKS_CLUSTER_NAME }}"
          ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text 2>/dev/null || echo "")

          if [[ -z "$ROLE_ARN" ]]; then
            echo "Creating new IAM role..."
            ROLE_ARN=$(aws iam create-role \
              --role-name "$ROLE_NAME" \
              --assume-role-policy-document file://ebs-trust-policy.json \
              --query 'Role.Arn' --output text)
            echo "Created role: $ROLE_ARN"
          else
            echo "Using existing role: $ROLE_ARN"
          fi

          echo "Attaching AmazonEBSCSIDriverPolicy..."
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
            --role-name "$ROLE_NAME" \
            || echo "Policy already attached"

          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV

      # -------------------------------------------------
      # 6. Install EBS CSI Driver + **FULL WAIT LOOP**
      # -------------------------------------------------
      - name: Install EBS CSI Driver
        run: |
          echo "Installing aws-ebs-csi-driver add-on..."
          aws eks create-addon \
            --cluster-name ${{ secrets.EKS_CLUSTER_NAME }} \
            --addon-name aws-ebs-csi-driver \
            --service-account-role-arn ${{ env.ROLE_ARN }} \
            --resolve-conflicts=OVERWRITE \
            || echo "EBS CSI driver already installed"

          echo "Waiting 5 minutes for controller to start..."
          sleep 300

          echo "Checking EBS CSI controller deployment..."
          for i in {1..12}; do
            if kubectl wait --for=condition=Available deployment/ebs-csi-controller -n kube-system --timeout=10s >/dev/null 2>&1; then
              echo "EBS CSI DRIVER READY"
              break
            fi
            echo "Controller not ready yet (attempt $i/12)..."
            sleep 10
          done

          # Final sanity check
          if ! kubectl get deployment ebs-csi-controller -n kube-system >/dev/null 2>&1; then
            echo "EBS CSI controller deployment missing!"
            exit 1
          fi

      # -------------------------------------------------
      # 7. Success
      # -------------------------------------------------
      - name: Success
        run: |
          echo "EKS INFRA CREATION COMPLETE!"
          echo "Cluster name : ${{ secrets.EKS_CLUSTER_NAME }}"
          echo "Region       : ${{ secrets.AWS_REGION }}"
          echo "Next step    : Run workflow '3. Deploy App'"