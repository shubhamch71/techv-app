name: Full CI/CD - Infra + App

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual run

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --------------------------------------------------
      # 1. Configure AWS Credentials via OIDC
      # --------------------------------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-actions-${{ github.run_id }}

      # --------------------------------------------------
      # 2. Setup Terraform 1.13.0 (Matches your .tf files)
      # --------------------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      # --------------------------------------------------
      # 3. Bootstrap S3 + DynamoDB (SKIP IF EXISTS)
      # --------------------------------------------------
      - name: Bootstrap Terraform Backend (Idempotent)
        run: |
          cd infra/terraform/backend
          terraform init || exit 1
          
          echo "Applying backend (S3 + DynamoDB) - will skip if exists..."
          terraform apply -auto-approve || echo "Backend apply failed but continuing (likely already exists)"
          
          # Optional: Force success even if apply "fails" due to existing resources
          true

      # --------------------------------------------------
      # 4. Deploy EKS + VPC (Idempotent - SAFE)
      # --------------------------------------------------
      - name: Deploy Infrastructure (Idempotent)
        run: |
          cd infra/terraform/app
          
          echo "Initializing with dynamic backend config..."
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=eks/app.tfstate" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_TABLE }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            || exit 1
          
          echo "Applying EKS + VPC - will update or skip existing resources..."
          terraform apply -auto-approve || echo "Infra apply had warnings, but continuing..."

      # --------------------------------------------------
      # 5. Update kubeconfig
      # --------------------------------------------------
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --alias techv || true

      # --------------------------------------------------
      # 6. Login to Docker Hub
      # --------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --------------------------------------------------
      # 7. Build & Push Backend
      # --------------------------------------------------
      - name: Build & Push Backend
        run: |
          cd backend
          IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/emp-backend:${{ github.sha }}
          echo "Building backend: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "BACKEND_IMAGE=$IMAGE_TAG" >> $GITHUB_ENV

      # --------------------------------------------------
      # 8. Build & Push Frontend
      # --------------------------------------------------
      - name: Build & Push Frontend
        run: |
          cd frontend
          IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/emp-frontend:${{ github.sha }}
          echo "Building frontend: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "FRONTEND_IMAGE=$IMAGE_TAG" >> $GITHUB_ENV

      # --------------------------------------------------
      # 9. Deploy to EKS with Kustomize
      # --------------------------------------------------
      - name: Deploy Application
        run: |
          cd kustomize/overlays/dev
          
          echo "Patching images in Kustomize..."
          kustomize edit set image \
            backend=${{ env.BACKEND_IMAGE }} \
            frontend=${{ env.FRONTEND_IMAGE }}
          
          echo "Applying to cluster..."
          kustomize build . | kubectl apply -f - || echo "K8s apply had warnings, continuing..."

      # --------------------------------------------------
      # 10. Wait & Output URL
      # --------------------------------------------------
      - name: Get Application URL
        run: |
          echo "Waiting for frontend rollout..."
          kubectl rollout status deployment/frontend --timeout=300s || echo "Rollout timeout, but continuing"
          
          echo "Waiting for NLB..."
          for i in {1..30}; do
            NLB_HOST=$(kubectl get svc frontend-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [[ -n "$NLB_HOST" ]]; then
              break
            fi
            echo "Still waiting... ($i/30)"
            sleep 10
          done
          
          if [[ -n "$NLB_HOST" ]]; then
            APP_URL="http://$NLB_HOST"
            echo "APP IS LIVE: $APP_URL"
            echo "APP_URL=$APP_URL" >> $GITHUB_ENV
          else
            echo "NLB not ready yet. Check later."
            echo "APP_URL=pending" >> $GITHUB_ENV
          fi

      # --------------------------------------------------
      # 11. Final Success
      # --------------------------------------------------
      - name: Deployment Summary
        run: |
          echo "FULL DEPLOYMENT COMPLETE (or updated existing)"
          echo "EKS: ${{ secrets.EKS_CLUSTER_NAME }}"
          echo "Backend: ${{ env.BACKEND_IMAGE }}"
          echo "Frontend: ${{ env.FRONTEND_IMAGE }}"
          echo "URL: ${{ env.APP_URL }}"
