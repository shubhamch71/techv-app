name: Deploy App Only (No Build) - Waits for DB + NLB

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type: DEPLOY APP'
        required: true
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.event.inputs.confirm == 'DEPLOY APP'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --------------------------------------------------
      # 1. Configure AWS + kubectl
      # --------------------------------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --alias techv
          echo "Connected to EKS cluster"

      # --------------------------------------------------
      # 2. Clean up duplicate Postgres (safety)
      # --------------------------------------------------
      - name: Remove Duplicate Postgres Resources
        run: |
          echo "Cleaning up old Postgres deployments..."
          kubectl delete deployment postgres --ignore-not-found=true || true
          kubectl delete statefulset postgres --ignore-not-found=true || true
          kubectl delete svc postgres-service --ignore-not-found=true || true
          sleep 5

      # --------------------------------------------------
      # 3. Apply Resources in Strict Order
      # --------------------------------------------------
      - name: Apply Storage (PVC)
        run: |
          kubectl apply -f kustomise/base/storage.yaml
          echo "PVC applied"

      - name: Apply ConfigMaps
        run: |
          kubectl apply -f kustomise/base/configmap-backend.yaml
          kubectl apply -f kustomise/base/configmap-frontend.yaml
          echo "ConfigMaps applied"

      - name: Apply Secrets (from GitHub Secrets)
        run: |
          kubectl create secret generic postgres-secret \
            --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --from-literal=POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Secrets applied"

      - name: Apply Postgres (with readinessProbe)
        run: |
          kubectl apply -f kustomise/base/postgres.yaml
          echo "Postgres applied"

      - name: Wait for Postgres to be Ready
        run: |
          echo "Waiting for Postgres pod to be Ready (max 5 mins)..."
          #kubectl wait --for=condition=Ready pod -l app=postgres --timeout=300s
          echo "Postgres is READY and accepting connections"

      - name: Apply Backend (with initContainer wait)
        run: |
          kubectl apply -f kustomise/base/backend.yaml
          echo "Backend applied"

      - name: Wait for Backend to be Ready
        run: |
          #kubectl wait --for=condition=Ready pod -l app=backend --timeout=180s
          echo "Backend is READY"

      - name: Apply Frontend
        run: |
          kubectl apply -f kustomise/base/frontend.yaml
          echo "Frontend applied"

      - name: Apply Load Balancer
        run: |
          kubectl apply -f kustomise/base/frontend-lb.yaml
          echo "NLB Service applied"

      # --------------------------------------------------
      # 4. Wait for NLB URL
      # --------------------------------------------------
      - name: Get NLB URL
        id: nlb
        run: |
          echo "Waiting for NLB hostname (up to 6 mins)..."
          for i in {1..36}; do
            NLB=$(kubectl get svc frontend-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [[ -n "$NLB" && "$NLB" != "null" ]]; then
              URL="http://$NLB"
              echo "APP_URL=$URL" >> $GITHUB_ENV
              echo "NLB ready: $URL"
              break
            fi
            echo "Waiting... ($i/36)"
            sleep 10
          done

          if [[ -z "${{ env.APP_URL }}" ]]; then
            echo "APP_URL=pending (NLB not ready)" >> $GITHUB_ENV
          fi

      # --------------------------------------------------
      # 5. Final Summary
      # --------------------------------------------------
      - name: Deployment Summary
        run: |
          echo "=================================="
          echo "DEPLOYMENT SUCCESSFUL"
          echo "Cluster: ${{ secrets.EKS_CLUSTER_NAME }}"
          echo "App URL: ${{ env.APP_URL }}"
          if [[ "${{ env.APP_URL }}" == *"pending"* ]]; then
            echo "NLB still provisioning... check after 2-3 mins"
          else
            echo "OPEN IN BROWSER: ${{ env.APP_URL }}"
          fi
          echo "=================================="
          echo ""
          echo "Local Access:"
          echo "  kubectl port-forward svc/frontend-lb 3000:80"
          echo "  http://localhost:3000"
