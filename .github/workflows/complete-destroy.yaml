# .github/workflows/nuclear-destroy.yaml
name: Complete Destroy (Everything)

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'TYPE: DESTROY EVERYTHING'
        required: true

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.event.inputs.confirm == 'DESTROY EVERYTHING'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0   # FIXED

      # ————————————————————————
      # 1. DESTROY APP INFRA (EKS + VPC)
      # ————————————————————————
      - name: Destroy EKS + VPC
        run: |
          cd infra/terraform/app
          terraform init || true
          terraform refresh -auto-approve || true
          terraform destroy -auto-approve \
            -var="cluster_name=${{ secrets.EKS_CLUSTER_NAME }}" \
            -var="region=${{ secrets.AWS_REGION }}" \
            -var="backend_bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -var="backend_table=${{ secrets.TF_BACKEND_TABLE }}" || true

      # ————————————————————————
      # 2. DESTROY TERRAFORM BACKEND
      # ————————————————————————
      - name: Destroy Backend (S3 + DynamoDB)
        run: |
          cd infra/terraform/backend
          terraform init || true
          terraform refresh -auto-approve || true
          terraform destroy -auto-approve \
            -var="bucket_name=${{ secrets.TF_BACKEND_BUCKET }}" \
            -var="table_name=${{ secrets.TF_BACKEND_TABLE }}" \
            -var="region=${{ secrets.AWS_REGION }}" || true

      # ————————————————————————
      # 3. FORCE EMPTY & DELETE S3 BUCKET
      # ————————————————————————
      - name: Empty S3 Bucket
        run: |
          BUCKET="${{ secrets.TF_BACKEND_BUCKET }}"
          echo "Emptying bucket: $BUCKET"

          aws s3api list-object-versions --bucket $BUCKET --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output json | \
            jq -r '.Objects[] | "\(.Key)|\(.VersionId)"' | \
            while IFS='|' read -r KEY VID; do
              aws s3api delete-object --bucket $BUCKET --key "$KEY" --version-id "$VID" || true
            done

          aws s3api list-object-versions --bucket $BUCKET --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output json | \
            jq -r '.Objects[] | "\(.Key)|\(.VersionId)"' | \
            while IFS='|' read -r KEY VID; do
              aws s3api delete-object --bucket $BUCKET --key "$KEY" --version-id "$VID" || true
            done

          aws s3 rb s3://$BUCKET --force || true
          echo "S3 bucket deleted"

      # ————————————————————————
      # 4. CLEANUP IAM & ENIs
      # ————————————————————————
      - name: Cleanup IAM & ENIs
        run: |
          ROLE="AmazonEKS_EBS_CSI_DriverRole_${{ secrets.EKS_CLUSTER_NAME }}"
          aws iam detach-role-policy --role-name "$ROLE" --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy || true
          aws iam delete-role --role-name "$ROLE" || true

          aws iam list-roles --query "Roles[?contains(RoleName, '${{ secrets.EKS_CLUSTER_NAME }}')].RoleName" --output text | \
            xargs -I {} aws iam delete-role --role-name {} || true

          aws ec2 describe-network-interfaces --filters "Name=description,Values=*EKS*" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text | \
            xargs -I {} aws ec2 delete-network-interface --network-interface-id {} || true

      # ————————————————————————
      # 5. FINAL CHECK
      # ————————————————————————
      - name: Final Check
        run: |
          echo "NUCLEAR DESTROY COMPLETE"
          echo "No EKS, VPC, S3, IAM left."