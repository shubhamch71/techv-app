name: NUCLEAR DESTROY - Full Cleanup (Safe Order)

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'TYPE EXACTLY: DESTROY EVERYTHING'
        required: true
        default: ''
        type: string

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    if: github.event.inputs.confirm_destroy == 'DESTROY EVERYTHING'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --------------------------------------------------
      # 1. Configure AWS
      # --------------------------------------------------
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --------------------------------------------------
      # 2. Setup Terraform + kubectl
      # --------------------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # --------------------------------------------------
      # 3. UPDATE KUBECONFIG (IF CLUSTER EXISTS)
      # --------------------------------------------------
      - name: Try Connect to EKS
        run: |
          set +e
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --alias techv
          echo "KUBE_CONNECTED=$?" >> $GITHUB_ENV
          set -e

      # --------------------------------------------------
      # 4. DELETE K8s APP (IF CONNECTED)
      # --------------------------------------------------
      - name: Delete K8s App
        if: env.KUBE_CONNECTED == '0'
        run: |
          echo "Deleting app from EKS..."
          cd kustomise/overlays/dev
          kustomize build . | kubectl delete -f - --ignore-not-found=true || true

      # --------------------------------------------------
      # 5. DESTROY EKS + VPC (APP INFRA)
      # --------------------------------------------------
      - name: Destroy EKS + VPC
        run: |
          cd infra/terraform/app
          
          echo "Initializing app state..."
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=eks/app.tfstate" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_TABLE }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            || true

          echo "DESTROYING EKS + VPC..."
          terraform destroy -auto-approve || echo "App destroy complete (some already gone)"

      # --------------------------------------------------
      # 6. EMPTY S3 BUCKET (INCLUDING STATE FILE)
      # --------------------------------------------------
      - name: Empty S3 Bucket (Full)
        run: |
          BUCKET="${{ secrets.TF_BACKEND_BUCKET }}"
          echo "EMPTYING S3 BUCKET: $BUCKET (including state file)"
          
          # Delete ALL objects + versions
          aws s3api delete-objects \
            --bucket $BUCKET \
            --delete "$(aws s3api list-object-versions --bucket $BUCKET --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output json)" \
            --output text 2>/dev/null || true
          
          aws s3api delete-objects \
            --bucket $BUCKET \
            --delete "$(aws s3api list-object-versions --bucket $BUCKET --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output json)" \
            --output text 2>/dev/null || true
          
          echo "S3 bucket fully emptied"

      # --------------------------------------------------
      # 7. DESTROY BACKEND (S3 + DYNAMODB)
      # --------------------------------------------------
      - name: Destroy S3 + DynamoDB
        run: |
          cd infra/terraform/backend
          terraform init || true
          terraform destroy -auto-approve || true

      # --------------------------------------------------
      # 8. MANUAL CLEANUP: IAM, KMS, CLOUDWATCH
      # --------------------------------------------------
      - name: Cleanup IAM User
        run: |
          USER=$(aws iam list-users --query "Users[?contains(UserName, 'admin')].UserName" --output text 2>/dev/null || echo "")
          if [ -n "$USER" ]; then
            echo "Deleting IAM user: $USER"
            aws iam delete-user --user-name "$USER" || true
          fi

      - name: Cleanup KMS Alias
        run: |
          ALIAS="alias/eks/${{ secrets.EKS_CLUSTER_NAME }}"
          aws kms delete-alias --alias-name "$ALIAS" || true

      - name: Cleanup CloudWatch Logs
        run: |
          LOG_GROUP="/aws/eks/${{ secrets.EKS_CLUSTER_NAME }}/cluster"
          aws logs delete-log-group --log-group-name "$LOG_GROUP" || true

      # --------------------------------------------------
      # 9. FINAL SUCCESS
      # --------------------------------------------------
      - name: NUCLEAR CLEANUP COMPLETE
        run: |
          echo "FULL DESTRUCTION SUCCESSFUL"
          echo "Deleted in order:"
          echo "   1. K8s App"
          echo "   2. EKS + VPC"
          echo "   3. S3 Bucket (emptied + deleted)"
          echo "   4. DynamoDB"
          echo "   5. IAM, KMS, CloudWatch"
          echo ""
          echo "Push to main to redeploy"
